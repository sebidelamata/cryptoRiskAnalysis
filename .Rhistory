active = -1,
type= 'dropdown',
buttons = list(
list(
label = "Bitcoin",
method = "update",
args = list(
list(
visible = c(
TRUE,
FALSE,
FALSE,
FALSE,
FALSE,
FALSE
)
),
list(
title = "BTC Bitcoin"
)
)
),
list(
label = "Dogecoin",
method = "update",
args = list(
list(
visible = c(
FALSE,
TRUE,
FALSE,
FALSE,
FALSE,
FALSE
)
),
list(
title = "DOGE Dogecoin"
)
)
),
list(
label = "Ethereum",
method = "update",
args = list(
list(
visible = c(
FALSE,
FALSE,
TRUE,
FALSE,
FALSE,
FALSE
)
),
list(
title = "ETH Ethereum"
)
)
),
list(
label = "XRP",
method = "update",
args = list(
list(
visible = c(
FALSE,
FALSE,
FALSE,
TRUE,
FALSE,
FALSE
)
),
list(
title = "XRP Ripple"
)
)
),
list(
label = "S&P 500",
method = "update",
args = list(
list(
visible = c(
FALSE,
FALSE,
FALSE,
FALSE,
TRUE,
FALSE
)
),
list(
title = "SPY S&P 500 ETF"
)
)
),
list(
label = "GLD",
method = "update",
args = list(
list(
visible = c(
FALSE,
FALSE,
FALSE,
FALSE,
FALSE,
TRUE
)
),
list(
title = "GLD SPDR Gold Shares ETF"
)
)
)
)
)
)
figure <- figure %>%
layout(
updatemenus = updatemenus,
showlegend = FALSE,
plot_bgcolor = colors$background,
paper_bgcolor = colors$background,
font = list(
color = colors$text
)
)
}
)
# we are going to do another app callback for the log returns time series
app$callback(
output(
id = 'dailyLogReturnTimeSeries',
property = 'figure'
),
params = list(
input(
id = 'logTimeSeriesSelector',
property = 'value'
),
input(
id = "logTimePeriodSelector",
property = "value"
)
),
function(value, value2) {
perdiodicitySelected <- NULL
if (value2 == "D"){
perdiodicitySelected <- underlyingsLogReturns
} else if (value2 == "W"){
perdiodicitySelected <- weeklyLogReturns
} else if (value2 == "M"){
perdiodicitySelected <- monthlyLogReturns
} else if (value2 == "Q"){
perdiodicitySelected <- quarterlyLogReturns
} else {
perdiodicitySelected <- annualLogReturns
}
durationSelected <- NULL
if (value == "1W") {
durationSelected <- which(perdiodicitySelected$Date >= max(perdiodicitySelected$Date) - 7)
durationSelected <- perdiodicitySelected[durationSelected,]
} else if (value == "1M") {
durationSelected = which(perdiodicitySelected$Date >= max(perdiodicitySelected$Date) - 30)
durationSelected <- perdiodicitySelected[durationSelected,]
} else if (value == "3M") {
durationSelected = which(perdiodicitySelected$Date >= max(perdiodicitySelected$Date) - 90)
durationSelected <- perdiodicitySelected[durationSelected,]
} else if (value == "1Y") {
durationSelected = which(perdiodicitySelected$Date >= max(perdiodicitySelected$Date) - 365)
durationSelected <- perdiodicitySelected[durationSelected,]
} else if (value == "5Y") {
durationSelected = which(perdiodicitySelected$Date >= max(perdiodicitySelected$Date) - 365 * 5)
durationSelected <- perdiodicitySelected[durationSelected,]
} else {
durationSelected <- perdiodicitySelected
}
figure <- plot_ly(
data = durationSelected,
x = ~Date,
y = ~`BTC-USD`,
name = "Bitcoin",
type = "bar"
) %>%
add_trace(
y = ~`DOGE-USD`,
name = "Dogecoin"
) %>%
add_trace(
y = ~`ETH-USD`,
name = "Ethereum"
) %>%
add_trace(
y = ~`XRP-USD`,
name = "XRP"
) %>%
add_trace(
y = ~SPY,
name = "S&P 500"
) %>%
add_trace(
y = ~GLD,
name = "GLD"
) %>%
layout(
plot_bgcolor = colors$background,
paper_bgcolor = colors$background,
font = list(
color = colors$text
)
)
}
)
# we are going to do another app callback for the VaR
app$callback(
output(
id = 'VaRPlot',
property = 'figure'
),
params = list(
input(
id = 'VaRChecklist',
property = 'value'
)
),
function(item) {
# VaR Graph
figure <- plot_ly() %>%
layout(
plot_bgcolor = colors$background,
paper_bgcolor = colors$background,
font = list(
color = colors$text
)
)
if(item == "BTC"){
# lets calculate the density of btc
itemDensity <- density(underlyingsLogReturns$`BTC-USD`)
# now we can calculate VaR to the 90%
itemVaR <- qnorm(
0.95,
mean = mean(underlyingsLogReturns$`BTC-USD`),
sd = sd(underlyingsLogReturns$`BTC-USD`)
)
# now lets calculate expexted shortfall
itemES <- ESnorm(
0.95,
mu = mean(underlyingsLogReturns$`BTC-USD`),
sd = sd(underlyingsLogReturns$`BTC-USD`)
)
figure %>%
add_trace(
x = ~itemDensity$x,
y = ~itemDensity$y,
type = "scatter",
mode = "lines",
fill = "tozeroy",
alpha = 0.6
) %>%
add_segments(
x = itemVaR,
xend = itemVaR,
y = 0,
yend = 20
) %>%
add_segments(
x = itemES,
xend = itemES,
y = 0,
yend = 20
)
} else if(item == "DOGE"){
# lets calculate the density of btc
itemDensity <- density(underlyingsLogReturns$`DOGE-USD`)
# now we can calculate VaR to the 90%
itemVaR <- qnorm(
0.95,
mean = mean(underlyingsLogReturns$`DOGE-USD`),
sd = sd(underlyingsLogReturns$`DOGE-USD`)
)
# now lets calculate expexted shortfall
itemES <- ESnorm(
0.95,
mu = mean(underlyingsLogReturns$`DOGE-USD`),
sd = sd(underlyingsLogReturns$`DOGE-USD`)
)
figure %>%
add_trace(
x = ~itemDensity$x,
y = ~itemDensity$y,
type = "scatter",
mode = "lines",
fill = "tozeroy",
alpha = 0.6
) %>%
add_segments(
x = itemVaR,
xend = itemVaR,
y = 0,
yend = 20
) %>%
add_segments(
x = itemES,
xend = itemES,
y = 0,
yend = 20
)
} else if(item == "ETH"){
# lets calculate the density of btc
itemDensity <- density(underlyingsLogReturns$`ETH-USD`)
# now we can calculate VaR to the 90%
itemVaR <- qnorm(
0.95,
mean = mean(underlyingsLogReturns$`ETH-USD`),
sd = sd(underlyingsLogReturns$`ETH-USD`)
)
# now lets calculate expexted shortfall
itemES <- ESnorm(
0.95,
mu = mean(underlyingsLogReturns$`ETH-USD`),
sd = sd(underlyingsLogReturns$`ETH-USD`)
)
figure %>%
add_trace(
x = ~itemDensity$x,
y = ~itemDensity$y,
type = "scatter",
mode = "lines",
fill = "tozeroy",
alpha = 0.6
) %>%
add_segments(
x = itemVaR,
xend = itemVaR,
y = 0,
yend = 20
) %>%
add_segments(
x = itemES,
xend = itemES,
y = 0,
yend = 20
)
} else if(item == "XRP"){
# lets calculate the density of btc
itemDensity <- density(underlyingsLogReturns$`XRP-USD`)
# now we can calculate VaR to the 90%
itemVaR <- qnorm(
0.95,
mean = mean(underlyingsLogReturns$`XRP-USD`),
sd = sd(underlyingsLogReturns$`XRP-USD`)
)
# now lets calculate expexted shortfall
itemES <- ESnorm(
0.95,
mu = mean(underlyingsLogReturns$`XRP-USD`),
sd = sd(underlyingsLogReturns$`XRP-USD`)
)
figure %>%
add_trace(
x = ~itemDensity$x,
y = ~itemDensity$y,
type = "scatter",
mode = "lines",
fill = "tozeroy",
alpha = 0.6
) %>%
add_segments(
x = itemVaR,
xend = itemVaR,
y = 0,
yend = 20
) %>%
add_segments(
x = itemES,
xend = itemES,
y = 0,
yend = 20
)
} else if(item == "SPY"){
# lets calculate the density of btc
itemDensity <- density(underlyingsLogReturns$SPY)
# now we can calculate VaR to the 90%
itemVaR <- qnorm(
0.95,
mean = mean(underlyingsLogReturns$SPY),
sd = sd(underlyingsLogReturns$SPY)
)
# now lets calculate expexted shortfall
itemES <- ESnorm(
0.95,
mu = mean(underlyingsLogReturns$SPY),
sd = sd(underlyingsLogReturns$SPY)
)
figure %>%
add_trace(
x = ~itemDensity$x,
y = ~itemDensity$y,
type = "scatter",
mode = "lines",
fill = "tozeroy",
alpha = 0.6
) %>%
add_segments(
x = itemVaR,
xend = itemVaR,
y = 0,
yend = 20
) %>%
add_segments(
x = itemES,
xend = itemES,
y = 0,
yend = 20
)
} else {
# lets calculate the density of btc
itemDensity <- density(underlyingsLogReturns$GLD)
# now we can calculate VaR to the 90%
itemVaR <- qnorm(
0.95,
mean = mean(underlyingsLogReturns$GLD),
sd = sd(underlyingsLogReturns$GLD)
)
# now lets calculate expexted shortfall
itemES <- ESnorm(
0.95,
mu = mean(underlyingsLogReturns$GLD),
sd = sd(underlyingsLogReturns$GLD)
)
figure %>%
add_trace(
x = ~itemDensity$x,
y = ~itemDensity$y,
type = "scatter",
mode = "lines",
fill = "tozeroy",
alpha = 0.6
) %>%
add_segments(
x = itemVaR,
xend = itemVaR,
y = 0,
yend = 20
) %>%
add_segments(
x = itemES,
xend = itemES,
y = 0,
yend = 20
)
}
}
# # VaR Graph
# figure <- plot_ly(
#   data = underlyingsLogReturns
# ) %>%
#   layout(
#     plot_bgcolor = colors$background,
#     paper_bgcolor = colors$background,
#     font = list(
#       color = colors$text
#     )
#   )
#
# for (item in VarChecklistList){
#   # lets calculate the density of btc
#   itemDensity <- density(item)
#   # now we can calculate VaR to the 90%
#   itemVaR <- qnorm(
#     0.95,
#     mean = mean(item),
#     sd = sd(item)
#   )
#   # now lets calculate expexted shortfall
#   itemES <- ESnorm(
#     0.95,
#     mu = mean(item),
#     sd = sd(item)
#   )
#
#   figure %>%
#     add_trace(
#       x = ~itemDensity$x,
#       y = ~itemDensity$y,
#       type = "scatter",
#       mode = "lines",
#       fill = "tozeroy",
#       alpha = 0.6
#       ) %>%
#     add_segments(
#       x = itemVaR,
#       xend = itemVaR,
#       y = 0,
#       yend = 20
#   ) %>%
#     add_segments(
#       x = itemES,
#       xend = itemES,
#       y = 0,
#       yend = 20
#     )
# }
)
# now we run our app
app$run_server(
dev_tools_hot_reload=FALSE,
debug = TRUE
)
